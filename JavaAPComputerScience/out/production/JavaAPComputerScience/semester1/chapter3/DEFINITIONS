* Public = method is visible beyond the class
* Private = method is visible only in class
* Protected = method is visible to the package it's in and all subclasses

* garbage collection: runtime system disposes of method's created object when exiting the method
(to avoid cluttering up RAM).
* memory leakage: when there's no garbage collection, litter leaks into or clutters up RAM.
* default executor this: acts in place of executor (from main method) for object class methods.
EXAMPLE: in main method: sam = executor. In object class method: another object = executor.
Using "this" helps clarify which is used when.
"this" is an ALIAS for object.
EXAMPLE: fillOddSlots() method uses this.methodname() in place of executor but never uses this.spot
EXAMPLE: for clearing up constructor vs class variables (pic)
RULE of compiler: When no executor "this" is stated explicitly, compiler implicitly applies "this"

* actual parameter: value put in method call
* formal parameter: variable put in method heading

* local variable: declared in method body
*** NOTE: both formal parameter and local variable cannot be used outside method definition - both "local."
But formal gets value when method is called and local gets value when method body statements assign it a value.
