* field variable: declared outside any method definition (can be static or instance)

* INSTANCE variable:
--> each object of a class contains its own separate copy of the instance variable.
--> created when new object is made.
--> hold values referenced by multiple methods, constructors, or blocks.
--> can be declared in class level before or after use

* CLASS variable (static):
--> the class contains the only copy of its class variable

* utilities class: has no instance methods/variables or main method
-->  A private constructor is made in utilities class to stop the
utilities class from being instantiated and subclassed.

* method categories:
--> public
--> private
--> public static
--> private static
* class methods may be independent or dependent
* Independent class methods: run independent of their class logic
EXAMPLE: Vic.say() and Vic.reset() are not independent since they call private variables of Vic.
EXAMPLE: MathOp.average() is independent since it can run without accessing any class logic.

* ENCAPSULATION: a class does not let other classes change its variables by
declaring variables private.


* chaining: linking methods: methodX().methodY()
RULE: if methodX() returns an object value, that object value becomes "this" (executor) of methodY()
EXAMPLE: getPosition().equals(spot);