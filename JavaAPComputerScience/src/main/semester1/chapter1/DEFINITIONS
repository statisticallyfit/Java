VOCABULARY: Sections 1.1 - 1.3


1) method heading: accessmodifier + static/instance + returntype + methodname
2) method body: stuff inside braces
3) executor: object used to call method
Example:

sam.makeSmallSquare()

executor = sam object
instance method = makeSmallSquare()

4) to default: to implicitly use an executor.
Example: (SmartTurtle exercise)

Each method has a command without the executor sam  attached to it, but in main method, the
makeBig/SmallSquare() methods are called with the executor; the paint methods in the
makeBig/SMallSquare() methods default to the executor sam.

5) inherit: a child class obtains features of parent class
6) Public = method is visible beyond the class
7) Private = method is visible only in class
8) Protected = method is visible to the package it's in and all subclasses
9) Main method: sequence of instructions normally initiated from terminal window.
10) Instance method is available at object level only; acts only when object of class is used to call it.
11) Static method is available at class level; doesn't need instance to be used.
Static method is opposite of instance method.
12) object class = class containing multiple public instance methods, and no main method.
12) utilities class = class with all static methods, no main method.
13) application class = class containing main method.
13) CLASS CAN BE: application, utilities, object class.
14) source code = contents of the .java file
15) object code = contents of the .class file (obtained after successful compile of .java file.
--> expressed in bytecode, runs on JVM
*** java "programname" command in DOS loads the object code into primary memory from secondary memory.

16) identifier: method, variable or class name you choose
17) keyword: adopted names for actions by java
18) to link in: runtime system *LINKS IN* all other class definitions required by program when running.
19) prototype: exe program that does part job of final product to test.
..Or just a trial of the real program, to throw out when done planning.
20) object: class instance; has state (stored in fields), behavior (exposed by method), and name.

21) ClassName obj; statement: creates a reference variable named "obj" in RAM that stores attributes of object.
obj = new ClassName(); statement: creates object.