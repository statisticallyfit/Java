{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Consolas;}{\f1\fnil Times New Roman;}{\f2\fnil Courier New;}{\f3\fnil Calibri;}{\f4\fnil Consolas;}}
{\colortbl ;\red0\green0\blue255;\red0\green0\blue0;\red84\green6\blue121;\red128\green128\blue255;\red0\green77\blue187;\red204\green120\blue50;\red0\green255\blue255;}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sa200\sl240\slmult1\lang9\f0\fs21\par
\cf1\b\fs36 Activity 1: \cf0\b0\fs21\par
\pard\sl240\slmult1\cf2\b Exploration\b0\par
\pard\sa200\sl240\slmult1 Have several conversations with your chatbot and answer the following questions: \cf0\par
\pard\sl240\slmult1\cf2\b\'b7 How does it respond to \ldblquote where do you come from\rdblquote ? \b0\par
Response: "I am originally from a science lab. Now I live in Leeds. Where are you?"\cf0\par
\cf2\b\'b7 What is the most interesting response? \par
\b0\par
In the last conversation, I left the chat session suddenly. When I came back, I said "Sorry to have left so suddenly." The response was: "But if you are sorry, then why did you left suddenly?"\par
This is interesting because the response did not just copy a chunk of my reply. The chatbot did not include "so" for example. This leads me to think its technology might do more than simple string truncation, or perhaps the string truncations applied very sophisticatedly. \par
\cf0\par
\cf2\b\'b7 What is the most peculiar response? \par
\par
\b0 To the above reply, I said: "I was in a hurry." The chatbox said: "How did you like it?" which did not make sense in the given context. She might have forgotten what we were talking about. \par
\par
She also takes things literally. For instance, when I said a variation of "You remind me of my friend since you are mentally strong" she responded with "Oh I see. Knock knock." This was peculiar. When I typed "haha" she said human emotions are hard to understand and was glad to have made me laugh. She also asked why I was laughing and I said: "You took my answer literally." She responded peculiarly by saying: "Well that's okay. I'm glad you find me amusing.... I didn't steal it." This is peculiar since she again took my answer literally. When I said "you took my answer literally," she interpreted that as stealing.\par
\cf0\b\par
\pard\sa200\sl240\slmult1\cf2\'b7 How does it respond to \ldblquote asdfghjkl;\rdblquote ? \par
\b0 The response was: "You must be pretty bored to have typed out the middle row of your keyboard." The makers of the chatbot probably anticipated this response. After typing variations of gibberish, the chatbot said "I lost my train of thought" and "Can we get back to business?"\par
\par
\pard\sl240\slmult1\b Exercises\b0  \par
\pard\sa200\sl240\slmult1 Work with another group and have two different chatbots converse with each other. \par
Chats between Mitsuku (the above robot) and ALICE at sheepridge.pandorabots.com\par
\line (me): What is your name \line ALICE: I am called ALICE. \line MITSUKU: Like Alice in Wonderland! \line ALICE: Interesting comparison. \line MITSUKU: You might want to try changing the default ALICE responses in your bot  \cf1\i (This is very interesting! Mitsuku robot realized she was talking to another robot!)\cf2\i0\line ALICE: OK, I will try changing the default ALICE responses in my bot. MITSUKU: As long as you try your best that is all anyone can ask of you. Wow! \line ALICE: Thanks for the information. Give me a break. \line MITSUKU: It was nothing. I am not kidding \line ALICE: Even so, I appreciate it. OK I will adopt a more serious tone.\par
\cf1 Apparently, Mitsuku exhibits a mixture of intelligence and aggression compared to the simpler Alice. \cf2\par
\pard\sl240\slmult1\b Questions\b0\par
Simple chatbots act by looking for key words or phrases and responding to them.  \cf0\par
\cf2 1. Can you identify keywords to which your chatbot responds? \par
Keyword 1: "Argh" since the chatbot response was "Are you frustrated?"\par
Keyword 2: "food" since a sentence containing this keyword draws the response: "What does it taste like?"\par
Keyword 3: "spaghetti" since one instance when I typed a sentence with this word, the response was along the lines of: "I like Italian dishes too."\par
\cf0\par
\pard\sa200\sl240\slmult1\cf2 2. Think of several keywords and the responses they might cause. \cf0\par
Keyword 1: "Education", since response was: "It is important to get a good education then you can have a good job."\line Keyword 2: "true" or "very true" replies to the chatbot's previous comment result in the response: "You and I are on the same wavelength, [NAME]".\line Keyword 3: "What" generates "Are you confused?" But "What" followed by a noun leads the chatbot to ask about the noun. \line Keyword 4: "It is nice" leads to "What do you like about it?"\line Keyword 5: "Hmm" leads to: "My friend Alice says that 99.25% of people spell Hmm with 2 M's."  \par
\par
\par
\cf1\b\fs40 Activity 2: \cf0\b0\fs21\par
\pard\cf2\b Question\par
\b0 1. What happens when a keyword is included in another word? Consider statements like \ldblquote I know all the state capitals\rdblquote  and \ldblquote I like vegetables smothered in cheese.\rdblquote  Explain the problem with theresponses to these statements. \par
\par
For the first statement, the response "Why so negative?" is generated because the keyword "no" is contained in "know". For the second, the response "Tell me more about your family" is generated since the keyword "mother" is included in "smothered". \par
\par
\par
\cf1\b\fs40 Activity 3:\cf2\b0\fs21  \par
\f1\fs24\par
\par
\f2\fs22 findKeyword("She's my sister", "sister", 0);\par
\f1\fs24\par
\trowd\trgaph30\trleft-30\trrh288\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\cellx966\cellx1962\cellx2958\cellx3954\pard\intbl\b\f3\fs22 Iteration\cell psn\cell before\cell after\cell\row\trowd\trgaph30\trleft-30\trrh288\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\cellx966\cellx1962\cellx2958\cellx3954\pard\intbl\qr\b0 1\cell 9\cell\pard\intbl " "\cell " "\cell\row\pard\f2\par
findKeyword("Brother Tom is helpful", "brother", 0);\par
\cf0\f0\fs21\par
\trowd\trgaph30\trleft-30\trrh288\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\cellx966\cellx1962\cellx2958\cellx3954\pard\intbl\cf2\b\f3\fs22 Iteration\cell psn\cell before\cell after\cell\row\trowd\trgaph30\trleft-30\trrh288\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\cellx966\cellx1962\cellx2958\cellx3954\pard\intbl\qr\b0 1\cell 0\cell\pard\intbl " "\cell " "\cell\row\pard\cf0\f0\fs21\par
\cf2\f2\fs22 findKeyword("I can't catch wild cats.", "cat", 0);\par
\cf0\f0\fs21\par
\trowd\trgaph30\trleft-30\trrh288\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\cellx966\cellx1962\cellx2958\cellx3954\pard\intbl\cf2\b\f3\fs22 Iteration\cell psn\cell before\cell after\cell\row\trowd\trgaph30\trleft-30\trrh288\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\cellx966\cellx1962\cellx2958\cellx3954\pard\intbl\qr\b0 1\cell 8\cell\pard\intbl " "\cell "c"\cell\row\trowd\trgaph30\trleft-30\trrh288\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\cellx966\cellx1962\cellx2958\cellx3954\pard\intbl\qr 2\cell 19\cell\pard\intbl " "\cell "s"\cell\row\pard\cf0\f0\fs21\par
\cf2\f2\fs22 findKeyword("I know nothing about snow plows.", "no", 0); \cf0\f1\fs21\par
\f0\par
\trowd\trgaph30\trleft-30\trrh288\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\cellx966\cellx1962\cellx2958\cellx3954\pard\intbl\cf2\b\f3\fs22 Iteration\cell psn\cell before\cell after\cell\row\trowd\trgaph30\trleft-30\trrh288\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\cellx966\cellx1962\cellx2958\cellx3954\pard\intbl\qr\b0 1\cell 3\cell\pard\intbl "k"\cell "w"\cell\row\trowd\trgaph30\trleft-30\trrh288\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\cellx966\cellx1962\cellx2958\cellx3954\pard\intbl\qr 2\cell 17\cell\pard\intbl " "\cell "t"\cell\row\trowd\trgaph30\trleft-30\trrh288\trpaddl30\trpaddr30\trpaddfl3\trpaddfr3
\cellx966\cellx1962\cellx2958\cellx3954\pard\intbl\qr 3\cell 22\cell\pard\intbl "s"\cell "w"\cell\row\pard\cf0\f0\fs21\par
\par
\cf1\b\fs40 Activity 4:\cf2\fs21  \par
\par
\b0 Alter the code: \cf0\par
\cf2\'b7 Have it respond to \ldblquote I want something\rdblquote  statements with \ldblquote Would you really be happy if you had\par
something?\rdblquote  In doing this, you need to be careful about where you place the check. Be sure you \cf0\par
\cf2 understand why. For example: \cf0\par
\cf2 Statement: I want fried chicken.\par
Response: Would you really be happy if you had fried chicken?  \cf0\par
\cf2 9\~\cf0\par
\cf2\~\cf0\par
\cf2  \cf0\par
\cf2\'b7 Have it respond to statements of the form \ldblquote I something you\rdblquote  with the restructuring \ldblquote Why do you\par
something me?\rdblquote  For example: \cf0\par
\cf2 Statement: I like you.\par
Response: Why do you like me?  \cf0\par
\cf2 Find an example of when this structure does not work well. How can you improve it?\par
\lang1033 I could not find any example of when this structure fails. It seems to work well for all scenarios. \lang9  \par
\par
\par
\par
\pard\box\brdrdash\brdrw0 \cf3\f4\fs20 import java.util.Scanner;\line\i\line\i0 public class Magpie4\line\{\line     \i /**\line      * Get a default greeting\line      * @return a greeting\line      */\line     \i0 public String getGreeting()\line     \{\line         return "Hello, let's talk.";\line     \}\line\line     \i /**\line      * Gives a response to a user statement\line      *\line      * @param statement\line      *            the user statement\line      * @return a response based on the rules given\line      */\line     \i0 public String getResponse(String statement)\line     \{\line         String response = "";\line         if (statement.length() == 0)\line         \{\line             response = "Say something, please.";\line         \}\line\line         else if (findKeyword(statement, "no") >= 0)\line         \{\line             response = "Why so negative?";\line         \}\line         else if (findKeyword(statement, "mother") >= 0\line                 || findKeyword(statement, "father") >= 0\line                 || findKeyword(statement, "sister") >= 0\line                 || findKeyword(statement, "brother") >= 0)\line         \{\line             response = "Tell me more about your family.";\line         \}\line         \i // Responses which require transformations\line         \i0 else if (findKeyword(statement, "I want to", 0) >= 0)\line         \{\line             response = transformIWantToStatement(statement);\line         \}\line         else if(findKeyword(statement, "I want", 0) >= 0)\{\line             response = transformIWantStatement(statement);\line         \}\line         else if(findKeyword(statement, "I", 0) >= 0\line                 && findKeyword(statement, "you", findKeyword(statement, "I", 0)) >= 0)\{\line             response = transformIYouStatement(statement);\line         \}\line         else\line         \{\line             \i // Look for a two word (you <something> me)\line             // pattern\line             \i0 int psn = findKeyword(statement, "you", 0);\line\line             if (psn >= 0\line                     && findKeyword(statement, "me", psn) >= 0)\line             \{\line                 response = transformYouMeStatement(statement);\line             \}\line             else\line             \{\line                 response = getRandomResponse();\line             \}\line         \}\line         return response;\line     \}\line\line     \i /**\line      * Take a statement with "I want to <something>." and transform it into\line      * "What would it mean to <something>?"\line      * @param statement the user statement, assumed to contain "I want to"\line      * @return the transformed statement\line      */\line     \i0 private String transformIWantToStatement(String statement)\line     \{\line         \i //  Remove the final period, if there is one\line         \i0 statement = statement.trim();\line         String lastChar = statement.substring(statement\line                 .length() - 1);\line         if (lastChar.equals("."))\line         \{\line             statement = statement.substring(0, statement\line                     .length() - 1);\line         \}\line         int psn = findKeyword (statement, "I want to", 0);\line         String restOfStatement = statement.substring(psn + 9).trim();\line         return "What would it mean to " + restOfStatement + "?";\line     \}\cf4\line\par
\par
\lang1033\b\f0\fs28 /// Code changed for exercises 1 and 2\lang9\b0\f4\fs20\line\line    \cf5\b  \i /**\line      * EXERCISE 1\line      * Take a statement with "I want <something>." and transform it into\line      * "Would you be really happy if you had  <something>?"\line      * @param statement the user statement, assumed to contain "I want"\line      * @return the transformed statement\line      */\line     \i0 public String transformIWantStatement(String statement)\{\line         \i //  Remove the final period, if there is one\line         \i0 statement = statement.trim();\line         String lastChar = statement.substring(statement.length() - 1);\line         if (lastChar.equals("."))\line         \{\line             statement = statement.substring(0, statement.length() - 1);\line         \}\line         int psn = findKeyword (statement, "I want", 0);\line         String restOfStatement = statement.substring(psn + 6).trim();\line         return "Would you be really happy if you had " + restOfStatement + "?";\line     \}\line\line\line     \i /**\line      * EXERCISE 2\line      * Take a statement with "I <something>\lang1033\f0  you\lang9\f4 ." and transform it into\line      * "\lang1033\f0 Why do you \lang9\f4 <something>\lang1033\f0  me\lang9\f4 ?"\line      * @param statement the user statement, assumed to contain "I\lang1033\f0 " and "\tab you\lang9\f4 "\line      * @return the transformed statement\line      */\line     \i0 public String transformIYouStatement(String statement)\{\line         \i //  Remove the final period, if there is one\line         \i0 statement = statement.trim();\line         String lastChar = statement.substring(statement.length() - 1);\line         if (lastChar.equals("."))\line         \{\line             statement = statement.substring(0, statement.length() - 1);\line         \}\line\line         int psnOfI = findKeyword (statement, "I", 0);\line         int psnOfYou = findKeyword (statement, "you", psnOfI + 1);\line\line         String restOfStatement = statement.substring(psnOfI + 1, psnOfYou).trim();\line         return "Why do you " + restOfStatement + " me?";\line     \}\line\cf3\b0\line\line\line     \i /**\line      * Take a statement with "you <something> me" and transform it into\line      * "What makes you think that I <something> you?"\line      * @param statement the user statement, assumed to contain "you" followed by "me"\line      * @return the transformed statement\line      */\line     \i0 private String transformYouMeStatement(String statement)\line     \{\line         \i //  Remove the final period, if there is one\line         \i0 statement = statement.trim();\line         String lastChar = statement.substring(statement\line                 .length() - 1);\line         if (lastChar.equals("."))\line         \{\line             statement = statement.substring(0, statement\line                     .length() - 1);\line         \}\line\line         int psnOfYou = findKeyword (statement, "you", 0);\line         int psnOfMe = findKeyword (statement, "me", psnOfYou + 3);\line\line         String restOfStatement = statement.substring(psnOfYou + 3, psnOfMe).trim();\line         return "What makes you think that I " + restOfStatement + " you?";\line     \}\line\line\par
\par
\line     \i /**\line      * Search for one word in phrase.  The search is not case sensitive.\line      * This method will check that the given goal is not a substring of a longer string\line      * (so, for example, "I know" does not contain "no").\line      * @param statement the string to search\line      * @param goal the string to search for\line      * @param startPos the character of the string to begin the search at\line      * @return the index of the first occurrence of goal in statement or -1 if it's not found\line      */\line     \i0 private int findKeyword(String statement, String goal, int startPos)\line     \{\line         String phrase = statement.trim();\line         \i //  The only change to incorporate the startPos is in the line below\line         \i0 int psn = phrase.toLowerCase().indexOf(goal.toLowerCase(), startPos);\line\line         \i //  Refinement--make sure the goal isn't part of a word\line         \i0 while (psn >= 0)\line         \{\line             \i //  Find the string of length 1 before and after the word\line             \i0 String before = " ", after = " ";\line             if (psn > 0)\line             \{\line                 before = phrase.substring (psn - 1, psn).toLowerCase();\line             \}\line             if (psn + goal.length() < phrase.length())\line             \{\line                 after = phrase.substring(psn + goal.length(), psn + goal.length() + 1).toLowerCase();\line             \}\line\line             \i //  If before and after aren't letters, we've found the word\line             \i0 if (((before.compareTo ("a") < 0 ) || (before.compareTo("z") > 0))  \i //  before is not a letter\line                     \i0 && ((after.compareTo ("a") < 0 ) || (after.compareTo("z") > 0)))\line             \{\line                 return psn;\line             \}\line\line             \i //  The last position didn't work, so let's find the next, if there is one.\line             \i0 psn = phrase.indexOf(goal.toLowerCase(), psn + 1);\line\line         \}\line\line         return -1;\line     \}\line\line     \i /**\line      * Search for one word in phrase.  The search is not case sensitive.\line      * This method will check that the given goal is not a substring of a longer string\line      * (so, for example, "I know" does not contain "no").  The search begins at the beginning of the string.\line      * @param statement the string to search\line      * @param goal the string to search for\line      * @return the index of the first occurrence of goal in statement or -1 if it's not found\line      */\line     \i0 private int findKeyword(String statement, String goal)\line     \{\line         return findKeyword (statement, goal, 0);\line     \}\line\line\line\line     \i /**\line      * Pick a default response to use if nothing else fits.\line      * @return a non-committal string\line      */\line     \i0 private String getRandomResponse()\line     \{\line         final int NUMBER_OF_RESPONSES = 4;\line         double r = Math.\i random\i0 ();\line         int whichResponse = (int)(r * NUMBER_OF_RESPONSES);\line         String response = "";\line\line         if (whichResponse == 0)\line         \{\line             response = "Interesting, tell me more.";\line         \}\line         else if (whichResponse == 1)\line         \{\line             response = "Hmmm.";\line         \}\line         else if (whichResponse == 2)\line         \{\line             response = "Do you really think so?";\line         \}\line         else if (whichResponse == 3)\line         \{\line             response = "You don't say.";\line         \}\line\line         return response;\line     \}\line\line\}\line\line\line class MagpieRunner4\line\{\line\line     \i /**\line      * Create a Magpie, give it user input, and print its replies.\line      */\line     \i0 public static void main(String[] args)\line     \{\line         Magpie4 maggie = new Magpie4();\line\line         System.\i out\i0 .println (maggie.getGreeting());\line         Scanner in = new Scanner(System.\i in\i0 );\line         String statement = in.nextLine();\line\line         while (!statement.equals("Bye"))\line         \{\line             System.\i out\i0 .println (maggie.getResponse(statement));\line             statement = in.nextLine();\line         \}\line     \}\line\line\}\fs21\par
\pard\cf2\f0\par
\par
\par
\par
\par
\par
\pard\box\brdrdash\brdrw0 \cf1\b\fs40 Activity 5: \cf6\b0\f4\fs28\line\line\cf3\fs20 import java.util.Random;\line import java.util.Scanner;\line\line\i /**\line  * A program to carry on conversations with a human user.\line  * This version:\line  *<ul><li>\line  * \tab\tab Uses advanced search for keywords\line  *</li><li>\line  * \tab\tab Will transform statements as well as react to keywords\line  *</li></ul>\line  * This version uses an array to hold the default responses.\line  * @author Laurie White\line  * @version April 2012\line  */\line\i0 public class Magpie5\line\{\line     \i /**\line      * Get a default greeting\line      * @return a greeting\line      */\line     \i0 public String getGreeting()\line     \{\line         return "Hello, let's talk.";\line     \}\line\line     \i /**\line      * Gives a response to a user statement\line      *\line      * @param statement\line      *            the user statement\line      * @return a response based on the rules given\line      */\line     \i0 public String getResponse(String statement)\line     \{\line         String response = "";\line         if (statement.length() == 0)\line         \{\line             response = "Say something, please.";\line         \}\line\line         else if (findKeyword(statement, "no") >= 0)\line         \{\line             response = "Why so negative?";\line         \}\line         else if (findKeyword(statement, "mother") >= 0\line                 || findKeyword(statement, "father") >= 0\line                 || findKeyword(statement, "sister") >= 0\line                 || findKeyword(statement, "brother") >= 0)\line         \{\line             response = "Tell me more about your family.";\line         \}\line\line         \i // Responses which require transformations\line         \i0 else if (findKeyword(statement, "I want to", 0) >= 0)\line         \{\line             response = transformIWantToStatement(statement);\line         \}\line         \i //  Part of student solution\line         \i0 else if (findKeyword(statement, "I want", 0) >= 0)\line         \{\line             response = transformIWantStatement(statement);\line         \}\line\line         else\line         \{\line\line             \i // Look for a two word (you <something> me)\line             // pattern\line             \i0 int psn = findKeyword(statement, "you", 0);\line\line             if (psn >= 0\line                     && findKeyword(statement, "me", psn) >= 0)\line             \{\line                 response = transformYouMeStatement(statement);\line             \}\line             else\line             \{\line                 \i //  Part of student solution\line                 // Look for a two word (I <something> you)\line                 // pattern\line                 \i0 psn = findKeyword(statement, "i", 0);\line\line                 if (psn >= 0\line                         && findKeyword(statement, "you", psn) >= 0)\line                 \{\line                     response = transformIYouStatement(statement);\line                 \}\line                 else\line                 \{\line                     response = getRandomResponse();\line                 \}\line             \}\line         \}\line         return response;\line     \}\line\line     \i /**\line      * Take a statement with "I want to <something>." and transform it into\line      * "What would it mean to <something>?"\line      * @param statement the user statement, assumed to contain "I want to"\line      * @return the transformed statement\line      */\line     \i0 private String transformIWantToStatement(String statement)\line     \{\line         \i //  Remove the final period, if there is one\line         \i0 statement = statement.trim();\line         String lastChar = statement.substring(statement\line                 .length() - 1);\line         if (lastChar.equals("."))\line         \{\line             statement = statement.substring(0, statement\line                     .length() - 1);\line         \}\line         int psn = findKeyword (statement, "I want to", 0);\line         String restOfStatement = statement.substring(psn + 9).trim();\line         return "What would it mean to " + restOfStatement + "?";\line     \}\line\line\line     \i /**\line      * Take a statement with "I want <something>." and transform it into\line      * "Would you really be happy if you had <something>?"\line      * @param statement the user statement, assumed to contain "I want"\line      * @return the transformed statement\line      */\line     \i0 private String transformIWantStatement(String statement)\line     \{\line         \i //  Remove the final period, if there is one\line         \i0 statement = statement.trim();\line         String lastChar = statement.substring(statement\line                 .length() - 1);\line         if (lastChar.equals("."))\line         \{\line             statement = statement.substring(0, statement\line                     .length() - 1);\line         \}\line         int psn = findKeyword (statement, "I want", 0);\line         String restOfStatement = statement.substring(psn + 6).trim();\line         return "Would you really be happy if you had " + restOfStatement + "?";\line     \}\line\line     \i /**\line      * Take a statement with "you <something> me" and transform it into\line      * "What makes you think that I <something> you?"\line      * @param statement the user statement, assumed to contain "you" followed by "me"\line      * @return the transformed statement\line      */\line     \i0 private String transformYouMeStatement(String statement)\line     \{\line         \i //  Remove the final period, if there is one\line         \i0 statement = statement.trim();\line         String lastChar = statement.substring(statement\line                 .length() - 1);\line         if (lastChar.equals("."))\line         \{\line             statement = statement.substring(0, statement\line                     .length() - 1);\line         \}\line\line         int psnOfYou = findKeyword (statement, "you", 0);\line         int psnOfMe = findKeyword (statement, "me", psnOfYou + 3);\line\line         String restOfStatement = statement.substring(psnOfYou + 3, psnOfMe).trim();\line         return "What makes you think that I " + restOfStatement + " you?";\line     \}\line\line     \i /**\line      * Take a statement with "I <something> you" and transform it into\line      * "Why do you <something> me?"\line      * @param statement the user statement, assumed to contain "I" followed by "you"\line      * @return the transformed statement\line      */\line     \i0 private String transformIYouStatement(String statement)\line     \{\line         \i //  Remove the final period, if there is one\line         \i0 statement = statement.trim();\line         String lastChar = statement.substring(statement\line                 .length() - 1);\line         if (lastChar.equals("."))\line         \{\line             statement = statement.substring(0, statement\line                     .length() - 1);\line         \}\line\line         int psnOfI = findKeyword (statement, "I", 0);\line         int psnOfYou = findKeyword (statement, "you", psnOfI);\line\line         String restOfStatement = statement.substring(psnOfI + 1, psnOfYou).trim();\line         return "Why do you " + restOfStatement + " me?";\line     \}\line\line\line\line\line     \i /**\line      * Search for one word in phrase.  The search is not case sensitive.\line      * This method will check that the given goal is not a substring of a longer string\line      * (so, for example, "I know" does not contain "no").\line      * @param statement the string to search\line      * @param goal the string to search for\line      * @param startPos the character of the string to begin the search at\line      * @return the index of the first occurrence of goal in statement or -1 if it's not found\line      */\line     \i0 private int findKeyword(String statement, String goal, int startPos)\line     \{\line         String phrase = statement.trim();\line         \i //  The only change to incorporate the startPos is in the line below\line         \i0 int psn = phrase.toLowerCase().indexOf(goal.toLowerCase(), startPos);\line\line         \i //  Refinement--make sure the goal isn't part of a word\line         \i0 while (psn >= 0)\line         \{\line             \i //  Find the string of length 1 before and after the word\line             \i0 String before = " ", after = " ";\line             if (psn > 0)\line             \{\line                 before = phrase.substring (psn - 1, psn).toLowerCase();\line             \}\line             if (psn + goal.length() < phrase.length())\line             \{\line                 after = phrase.substring(psn + goal.length(), psn + goal.length() + 1).toLowerCase();\line             \}\line\line             \i //  If before and after aren't letters, we've found the word\line             \i0 if (((before.compareTo ("a") < 0 ) || (before.compareTo("z") > 0))  \i //  before is not a letter\line                     \i0 && ((after.compareTo ("a") < 0 ) || (after.compareTo("z") > 0)))\line             \{\line                 return psn;\line             \}\line\line             \i //  The last position didn't work, so let's find the next, if there is one.\line             \i0 psn = phrase.indexOf(goal.toLowerCase(), psn + 1);\line\line         \}\line\line         return -1;\line     \}\line\line     \i /**\line      * Search for one word in phrase.  The search is not case sensitive.\line      * This method will check that the given goal is not a substring of a longer string\line      * (so, for example, "I know" does not contain "no").  The search begins at the beginning of the string.\line      * @param statement the string to search\line      * @param goal the string to search for\line      * @return the index of the first occurrence of goal in statement or -1 if it's not found\line      */\line     \i0 private int findKeyword(String statement, String goal)\line     \{\line         return findKeyword (statement, goal, 0);\line     \}\line\par
\line\cf4\lang1033\b\f0\fs28 /// Random responses were added (the highlighted portion)\cf3\lang9\b0\f4\fs20\line     \i /**\line      * Pick a default response to use if nothing else fits.\line      * @return a non-committal string\line      */\line     \i0 private String getRandomResponse ()\line     \{\line         Random r = new Random ();\line         return randomResponses [r.nextInt(randomResponses.length)];\line     \}\line\line     private String [] randomResponses = \{"Interesting, tell me more",\line             "Hmmm.",\line             "Do you really think so?",\line             "You don't say.",\line             \highlight7 "What a fascinating idea!",\line             "I didn't know that!",\line             "The world is full of amazing things",\line             "Do you like airplanes?"\highlight0\line     \};\line\line\}\line\line\line class MagpieRunner5\line\{\line\line     \i /**\line      * Create a Magpie, give it user input, and print its replies.\line      */\line     \i0 public static void main(String[] args)\line     \{\line         Magpie5 maggie = new Magpie5();\line\line         System.\i out\i0 .println (maggie.getGreeting());\line         Scanner in = new Scanner (System.\i in\i0 );\line         String statement = in.nextLine();\line\line         while (!statement.equals("Bye"))\line         \{\line             System.\i out\i0 .println (maggie.getResponse(statement));\line             statement = in.nextLine();\line         \}\line     \}\line\line\}\line\pard\cf0\f0\fs21\par
}
 