Activity 1: 

Questions
1. How many bits does it take to represent the values from 0 to 255?  
One byte is 8 bits and a maximum of 8 bits is needed to store the numbers from 0 to 255 since
11111111 (base 2 number) represents 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 = 255. Since there are 3 values, one
for R, another for G and another for B, then (8)(3) = 24 bits are needed to store the values from 0 to 255. 

2. How many bytes does it take to represent a color in the RBG color model? 
Since 1 byte = 8 bits, there are 24/8 = 3 bytes needed to store a color in the RBG model, 
following the reasoning from the answer to question 1. 

3. How many pixels are in a picture that is 640 pixels wide and 480 pixels high? 
There are (640)(480) = 307,200 pixels in the picture. 



Activity 2: 

Questions 
1. How can you make pink?  
The ColorChooser class prints java.awt.Color[r=255, g=112, b=250] so to make pink, you need
r = 255,g=112, b=250. 

2. How can you make yellow?
Yellow is made with: r = 255, g = 255, b = 0. 

3. How can you make purple?
The color code for purple is: r = 204, g = 0, b = 204. 

4. How can you make white? 
The color code for white is: r = 255, g = 255, b=255.

5. How can you make dark gray?
The color code for dark gray is: r = 102, g=102, b=102. 




Activity 3: 

Questions   

1. What is the row index for the top left corner of the picture?
It is row = 0. 

2. What is the column index for the top left corner of the picture?
It is also 0. 

3. The width of this picture is 640. What is the right most column index?
The rightmost column index is at 639 since the first column starts at 0. It is numbered using
a base 0 system like arrays. 

4. The height of this picture is 480. What is the bottom most row index? 
The bottom most row index is 479. 

5. Does the row index increase from left to right or top to bottom?
It increases from top to bottom since rows are horizontallly layered. 

6. Does the column index increase from left to right or top to bottom? 
Column index increases from left to right since columns are vertically layered. 

7. Set the zoom to 500%. Can you see squares of color? This is called pixelation. Pixelation means
displaying a picture so magnified that the individual pixels look like small squares.   
I can see squares of color around objects such as trees or in the sand, but no squares in 
smooth features such as the sky. 




Activity 4: 

Exercises 
1. Write a getCount method in the IntArrayWorker class that returns the count of the
number of times a passed integer value is found in the matrix. There is already a method to test
this in IntArrayWorkerTester. Just uncomment the method testGetCount() and
the call to it in the main method of IntArrayWorkerTester. 

/* Exercise 1 */
    public int getCount(int targetValue){
        int count = 0;

        for(int[] row : matrix){
            for(int colValue : row){
                if(colValue == targetValue)
                    count++;
            }
        }
        return count;
    }


2. Write a getLargest method in the IntArrayWorker class that returns the largest value
in the matrix. There is already a method to test this in IntArrayWorkerTester. Just
uncomment the method testGetLargest() and the call to it in the main method of
IntArrayWorkerTester. 

/*Exercise 2 */
    public int getLargest(){
        int max = matrix[0][0];

        for(int r = 0; r < matrix.length; r++){
            for(int c = 0; c < matrix[0].length; c++){
                if(matrix[r][c] > max)
                    max = matrix[r][c];
            }
        }
        return max;
    }

3. Write a getColTotal method in the IntArrayWorker class that returns the total of all
integers in a specified column. There is already a method to test this in
IntArrayWorkerTester. Just uncomment the method testGetColTotal() and the
call to it in the main method of IntArrayWorkerTester. 


/* Exercise 3 */
    public int getColTotal(int givenCol){
        int colTotal = 0;

        for(int row = 0; row < matrix.length; row++){
            colTotal += matrix[row][givenCol];
        }
        return colTotal;
    }






Activity 5: 

 
Exercises
1. Open PictureTester.java and run its main method. You should get the same results 
as running the main method in the Picture class. The PictureTester class contains
class (static) methods for testing the methods that are in the Picture class.  
--->The zeroBlue() method shows a green overlay on the original beach picture. 

2. Uncomment the appropriate test method in the main method of PictureTester to test
any of the other methods in Picture.java. You can comment out the tests you don’t want
to run. You can also add new test methods to PictureTester to test any methods you
create in the Picture class. 

---> The test methods I wrote are next under each respective question. 



3.  Using the zeroBlue method as a starting point, write the method keepOnlyBlue that 
will keep only the blue values, that is, it will set the red and green values to zero. Create a class
(static) method to test this new method in the class PictureTester. Be sure to call the new
test method in the main method in PictureTester. 


public void keepOnlyBlue(){
        Pixel[][] pixels = this.getPixels2D();

        for(Pixel[] rowArray : pixels){
            for(Pixel pixelObj : rowArray){
                if(!pixelObj.getColor().equals(Color.blue)){
                    pixelObj.setRed(0);
                    pixelObj.setGreen(0);
                }
            }
        }
    }


public static void testKeepOnlyBlue(){
        Picture beach = new Picture("beach.jpg");
        beach.explore();
        beach.keepOnlyBlue();
        beach.explore();
    }
 
4. Write the negate method to negate all the pixels in a picture. To negate a picture, set the red
value to 255 minus the current red value, the green value to 255 minus the current green value
and the blue value to 255 minus the current blue value. Create a class (static) method to test this
new method in the class PictureTester. Be sure to call the new test method in the main
method in PictureTester.  

public void negate(){
        Pixel[][] pixels = this.getPixels2D();

        for(Pixel[] rowArray : pixels){
            for(Pixel pixelObj : rowArray){
                //negate each pixel
                pixelObj.setRed(255 - pixelObj.getRed());
                pixelObj.setGreen(255 - pixelObj.getGreen());
                pixelObj.setBlue(255 - pixelObj.getBlue());
            }
        }
    }

public static void testNegate(){
        Picture butterfly = new Picture("butterfly1.jpg");
        butterfly.explore();
        butterfly.negate();
        butterfly.explore();
    }

5. Write the grayscale method to turn the picture into shades of gray. Set the red, green, and
blue values to the average of the current red, green, and blue values (add all three values and
divide by 3). Create a class (static) method to test this new method in the class
PictureTester. Be sure to call the new test method in the main method in
PictureTester.  


public void grayScale(){
        Pixel[][] pixels = this.getPixels2D();

        for(Pixel[] rowArray : pixels){
            for(Pixel pixelObj : rowArray){
                int avgColor = (pixelObj.getRed() + pixelObj.getBlue() + pixelObj.getGreen()) / 3;
                pixelObj.setRed(avgColor);
                pixelObj.setGreen(avgColor);
                pixelObj.setBlue(avgColor);
            }
        }
    }

public static void testGrayScale(){
        Picture redMotorcycle = new Picture("redMotorcycle.jpg");
        redMotorcycle.explore();
        redMotorcycle.grayScale();
        redMotorcycle.explore();
    }

6. Challenge — Explore the “water.jpg” picture in the images folder. Write a method
fixUnderwater() to modify the pixel colors to make the fish easier to see. Create a class
(static) method to test this new method in the class PictureTester. Be sure to call the new
test method in the main method in PictureTester.  


/* Challenge Bonus: Exercise 6  --- with help from Mrs. Creasy */
    public void fixUnderwater(){
        Pixel[][] pixels = this.getPixels2D();

        for(int r = 0; r < pixels.length; r++){
            for(int c = 0; c < pixels[0].length; c++){
                Pixel pixelObj = pixels[r][c];
                pixelObj.setRed(pixelObj.getRed() * 4);
            }
        }

    }

/* Test Exercise 6 */
    public static void testFixUnderwater(){
        Picture water = new Picture("water.jpg");
        water.explore();
        water.fixUnderwater();
        water.explore();
    }







Activity 6: Mirroring Pictures


Exercises 
1. Write the method mirrorVerticalRightToLeft that mirrors a picture around a mirror
placed vertically from right to left. Hint: you can copy the body of mirrorVertical and
only change one line in the body of the method to accomplish this. Write a class (static) test
method called testMirrorVerticalRightToLeft in PictureTester to test this
new method and call it in the main method. 


/* Exercise 1 */
    public void mirrorVerticalRightToLeft() {
        Pixel[][] pixels = this.getPixels2D();
        Pixel leftPixel = null;
        Pixel rightPixel = null;

        for (int row = 0; row < pixels.length; row++) {
            for (int col = 0; col < pixels[0].length / 2; col++){
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][pixels[0].length - 1 - col];
                leftPixel.setColor(rightPixel.getColor());
            }
        }
    }


public static void testMirrorVerticalRightToLeft(){
        Picture pic = new Picture("redMotorcycle.jpg");
        pic.explore();
        pic.mirrorVerticalRightToLeft();
        pic.explore();
    }

2. Write the method mirrorHorizontal that mirrors a picture around a mirror placed
horizontally at the middle of the height of the picture. Mirror from top to bottom as shown in the
pictures below (Figure 8). Write a class (static) test method in PictureTester to test this
new method and call it in the main method. 

/* Exercise 2 */
    public void mirrorHorizontal(){
        Pixel[][] pixels = this.getPixels2D();
        Pixel topPixel = null;
        Pixel bottomPixel = null;

        for (int row = 0; row < pixels.length / 2; row++) {
            for (int col = 0; col < pixels[0].length; col++){
                topPixel = pixels[row][col];
                bottomPixel = pixels[pixels.length - 1 - row][col];
                bottomPixel.setColor(topPixel.getColor());
            }
        }
    }


/* Test exercise 2 */
    public static void testMirrorHorizontal(){
        Picture pic = new Picture("redMotorcycle.jpg");
        pic.explore();
        pic.mirrorHorizontal();
        pic.explore();
    }


3. Write the method mirrorHorizontalBotToTop that mirrors the picture around a mirror 
placed horizontally from bottom to top. Hint: you can copy the body of mirrorHorizontal
and only change one line to accomplish this. Write a class (static) test method in
PictureTester to test this new method and call it in the main method. 

    /* Exercise 3 */
    public void mirrorHorizontalBotToTop(){
        Pixel[][] pixels = this.getPixels2D();
        Pixel topPixel = null;
        Pixel bottomPixel = null;

        for (int row = 0; row < pixels.length / 2; row++) {
            for (int col = 0; col < pixels[0].length; col++){
                topPixel = pixels[row][col];
                bottomPixel = pixels[pixels.length - 1 - row][col];
                topPixel.setColor(bottomPixel.getColor());
            }
        }
    }

    /* Test exercise 3 */
    public static void testMirrorHorizontalBotToTop(){
        Picture pic = new Picture("redMotorcycle.jpg");
        pic.explore();
        pic.mirrorHorizontalBotToTop();
        pic.explore();
    }


4. Challenge — Work in groups to figure out the algorithm for the method mirrorDiagonal
that mirrors just a square part of the picture from bottom left to top right around a mirror placed
on the diagonal line (the diagonal line is the one where the row index equals the column index).
This will copy the triangular area to the left and below the diagonal line as shown below. This is
like folding a square piece of paper from the bottom left to the top right, painting just the bottom
left triangle and then (while the paint is still wet) folding the paper up to the top right again. The
paint would be copied from the bottom left to the top right as shown in the pictures below
(Figure 9). Write a class (static) test method in PictureTester to test this new method and 
call it in the main method. 


/* Exercise 4 */
    public void mirrorDiagonal(){
        Pixel[][] pixels = this.getPixels2D();
        Pixel topWingPixel = null;
        Pixel acrossWingPixel = null;

        for(int row = 0; row < pixels.length; row++){
            for(int col = 0; col < pixels.length; col++){
                topWingPixel = pixels[row][col];
                acrossWingPixel = pixels[col][row];
                topWingPixel.setColor(acrossWingPixel.getColor());
            }
        }
    }

/* Test Exercise 4 */
    public static void testMirrorDiagonal(){
        Picture pic = new Picture("beach.jpg");
        pic.explore();
        pic.mirrorDiagonal();
        pic.explore();
    }






Activity 7: Mirroring part of a picture

Exercises 
1. Check the calculation of the number of times the body of the nested loop executes by adding an
integer count variable to the mirrorTemple method that starts out at 0 and increments
inside the body of the loop. Print the value of count after the nested loop ends. 

public void mirrorTemple()
  {
      int numTimesLoopExecutes = 0;
    int mirrorPoint = 276;
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int count = 0;
    Pixel[][] pixels = this.getPixels2D();
    
    // loop through the rows
    for (int row = 27; row < 97; row++)
    {
      // loop from 13 to just before the mirror point
      for (int col = 13; col < mirrorPoint; col++)
      {
        numTimesLoopExecutes++;
        leftPixel = pixels[row][col];      
        rightPixel = pixels[row]                       
                         [mirrorPoint - col + mirrorPoint];
        rightPixel.setColor(leftPixel.getColor());
      }
    }
      System.out.println(numTimesLoopExecutes);
  }

The value printed to the screen is 18, 410. 




2. Write the method mirrorArms to mirror the arms on the snowman (“snowman.jpg”) to
make a snowman with 4 arms. Write a class (static) test method in PictureTester to test
this new method and call it in the main method. 

/* Exercise 1 from Mirroring snowman arms */
    public void mirrorArms(){
        int mirrorPoint = 193;
        Pixel[][] pixels = this.getPixels2D();
        Pixel topPixel = null;
        Pixel bottomPixel = null;

        //do the left arm
        for(int row = 158; row < mirrorPoint; row++){
            for(int col = 101; col < 172; col++){
                topPixel = pixels[row][col];
                bottomPixel = pixels[mirrorPoint - row + mirrorPoint][col];
                bottomPixel.setColor(topPixel.getColor());
            }
        }

        //do right arm
        mirrorPoint = 197;
        for(int row = 170; row < mirrorPoint; row++){
            for(int col = 238; col < 295; col++){
                topPixel = pixels[row][col];
                bottomPixel = pixels[mirrorPoint - row + mirrorPoint][col];
                bottomPixel.setColor(topPixel.getColor());
            }
        }
    }

/* Test exercise 1 */
    public static void testMirrorArms(){
        Picture pic = new Picture("snowman.jpg");
        pic.explore();
        pic.mirrorArms();
        pic.explore();
    }

3. Write the method mirrorGull to mirror the seagull (“seagull.jpg”) to the right so
that there are two seagulls on the beach near each other. Write a class (static) test method in
PictureTester to test this new method and call it in the main method. 

/* Exercise 3 */
    public void mirrorGull(){

        int mirrorPoint = 211;
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        Pixel[][] pixels = this.getPixels2D();


        for (int row = 231; row < 329; row++) {
            for (int col = 345; col >= mirrorPoint; col--){
                rightPixel = pixels[row][col];
                leftPixel = pixels[row][mirrorPoint - col + mirrorPoint];
                leftPixel.setColor(rightPixel.getColor());
            }
        }
    }

public static void testMirrorGull(){
        Picture pic = new Picture("seagull.jpg");
        pic.explore();
        pic.mirrorGull();
        pic.explore();
    }










Activity 8: Collage

1. Create a second copy method that adds parameters to allow you to copy just part of the
fromPic. You will need to add parameters that specify the start row, end row, start column,
and end column to copy from. Write a class (static) test method in PictureTester to test
this new method and call it in the main method. 


//Exercise 1 from activity 8
    public void copy2(Picture fromPic, int startToRow, int startToCol,
                      int startFromRow, int endFromRow, int startFromCol, int endFromCol) {

        Pixel fromPixel = null;
        Pixel toPixel = null;
        Pixel[][] toPixels = this.getPixels2D();
        Pixel[][] fromPixels = fromPic.getPixels2D();

        for (int fromRow = startFromRow, toRow = startToRow;
             fromRow < endFromRow && toRow < toPixels.length;
             fromRow++, toRow++)
        {
            for (int fromCol = startFromCol, toCol = startToCol;
                 fromCol < endFromCol && toCol < toPixels[0].length;
                 fromCol++, toCol++)
            {
                fromPixel = fromPixels[fromRow][fromCol];
                toPixel = toPixels[toRow][toCol];
                toPixel.setColor(fromPixel.getColor());
            }
        }
    }

//Exercise 1 test
    public static void testCopy2(){
        Picture pic = new Picture("seagull.jpg");
        pic.explore();
        pic.copy2(new Picture("butterfly1.jpg"), 50, 30,
                250,380,140,260);
        pic.explore();
    }

2. Create a myCollage method that has at least three pictures (can be the same picture) copied
three times with three different picture manipulations and at least one mirroring. Write a class
(static) test method in PictureTester to test this new method and call it in the main
method. 

//Exercise 2 activity 8
    public void myCollage(){
        //create cat picture and flower pic
        Picture cat = new Picture("mine_halfcat.jpg");
        Picture blueFlower = new Picture("mine_forgetnot.jpg");
        Picture pinkFlower = new Picture("mine_rose.jpg");

        //first flower
        for(int rowLevel = 0; rowLevel <= this.getHeight(); rowLevel += blueFlower.getHeight()){
            this.copy(blueFlower, rowLevel, 0);
        }
        //second flower
        for(int colLevel = 0; colLevel <= this.getWidth(); colLevel += pinkFlower.getWidth()) {
            this.copy(pinkFlower, this.getHeight() - pinkFlower.getHeight(), colLevel);
        }

        this.mirrorDiagonalLeftToRight(); //manipulation 3
        cat.mirrorVerticalRightToLeft(); //manipulation 1
        this.copy(cat, 134, 100); //manipulation 2
    }


//Exercise 2 testing activity 8
    public static void testMyCollage(){
        Picture canvas = new Picture("640x480.jpg");
        canvas.myCollage();
        canvas.explore();
    }





Activity 9: Edge Detection: 

1. Notice that the current edge detection method works best when there are big color changes from
left to right but not when the changes are from top to bottom. Add another loop that compares
the current pixel with the one below and sets the current pixel color to black as well when the
color distance is greater than the specified edge distance.  

//NOTE: completed with help from Mrs. Creasy

public void edgeDetection2(int edgeDist)
    {
        Picture copy = new Picture(this);
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        Pixel[][] pixels = this.getPixels2D();
        Color rightColor = null;
        // compare a pixel with one to the right of it
        for (int row = 0; row < pixels.length; row++) {
            for (int col = 0; col < pixels[0].length-1; col++) {

                leftPixel = pixels[row][col];
                rightPixel = pixels[row][col+1];
                rightColor = rightPixel.getColor();
                if (leftPixel.colorDistance(rightColor) > edgeDist) {
                    leftPixel.setColor(Color.BLACK);
                }
                else {
                    leftPixel.setColor(Color.WHITE);
                }
            }
        }
        // now compare a pixel with the one below it
        Pixel[][] copyPixels = copy.getPixels2D();
        Pixel topPixel = null;
        Pixel botPixel = null;
        Color botColor = null;
        for (int row = 0; row < copyPixels.length-1; row++) {
            for (int col = 0; col < copyPixels[0].length; col++) {
                topPixel = copyPixels[row][col];
                botPixel = copyPixels[row+1][col];
                botColor = botPixel.getColor();
                if (topPixel.colorDistance(botColor) > edgeDist)
                {
                    pixels[row][col].setColor(Color.BLACK);
                }
            }
        }
    }


public static void testEdgeDetection2()
  {
    Picture swan = new Picture("swan.jpg");
    swan.explore();
    swan.edgeDetection2(10);
    swan.explore();
  }



Exercise 2: optional
